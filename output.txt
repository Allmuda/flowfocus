import React, { useState, useEffect, useRef } from 'react';
import { Plus, Edit3, Trash2, Bell, Clock, Check, X, User, LogOut, Settings } from 'lucide-react';

const App = () => {
  const [user, setUser] = useState({ name: 'John Doe', email: 'john@example.com' });
  const [isAuthenticated, setIsAuthenticated] = useState(true);
  const [activeView, setActiveView] = useState('dashboard');
  const [tasks, setTasks] = useState([
    { id: 1, title: 'Complete project proposal', description: 'Finish the client proposal by Friday', dueDate: '2024-01-15', completed: false, priority: 'high', notes: 'Include budget breakdown' },
    { id: 2, title: 'Team meeting', description: 'Weekly team sync', dueDate: '2024-01-12', completed: true, priority: 'medium', notes: 'Prepare agenda' },
    { id: 3, title: 'Research new technologies', description: 'Look into React 18 features', dueDate: '2024-01-20', completed: false, priority: 'low', notes: '' }
  ]);
  const [timer, setTimer] = useState({ minutes: 25, seconds: 0, isActive: false, mode: 'work' });
  const [newTask, setNewTask] = useState({ title: '', description: '', dueDate: '', priority: 'medium', notes: '' });
  const [editingTask, setEditingTask] = useState(null);
  const [showTaskModal, setShowTaskModal] = useState(false);
  const [notifications, setNotifications] = useState([
    { id: 1, message: 'Task "Complete project proposal" is due tomorrow', read: false, time: '2 hours ago' },
    { id: 2, message: 'Timer session completed', read: true, time: '1 day ago' }
  ]);

  const timerRef = useRef(null);

  // Timer functionality
  useEffect(() => {
    if (timer.isActive) {
      timerRef.current = setInterval(() => {
        setTimer(prev => {
          if (prev.seconds > 0) {
            return { ...prev, seconds: prev.seconds - 1 };
          } else if (prev.minutes > 0) {
            return { ...prev, minutes: prev.minutes - 1, seconds: 59 };
          } else {
            // Timer completed
            clearInterval(timerRef.current);
            return { ...prev, isActive: false };
          }
        });
      }, 1000);
    } else {
      clearInterval(timerRef.current);
    }

    return () => clearInterval(timerRef.current);
  }, [timer.isActive]);

  const startTimer = () => {
    setTimer(prev => ({ ...prev, isActive: true }));
  };

  const pauseTimer = () => {
    setTimer(prev => ({ ...prev, isActive: false }));
  };

  const resetTimer = () => {
    setTimer(prev => ({
      minutes: prev.mode === 'work' ? 25 : prev.mode === 'break' ? 5 : 15,
      seconds: 0,
      isActive: false,
      mode: prev.mode
    }));
  };

  const switchTimerMode = (mode) => {
    setTimer({
      minutes: mode === 'work' ? 25 : mode === 'break' ? 5 : 15,
      seconds: 0,
      isActive: false,
      mode
    });
  };

  // Task management
  const addTask = () => {
    if (newTask.title.trim()) {
      const task = {
        id: Date.now(),
        ...newTask,
        completed: false
      };
      setTasks([...tasks, task]);
      setNewTask({ title: '', description: '', dueDate: '', priority: 'medium', notes: '' });
      setShowTaskModal(false);
    }
  };

  const updateTask = () => {
    if (editingTask.title.trim()) {
      setTasks(tasks.map(task => 
        task.id === editingTask.id ? editingTask : task
      ));
      setEditingTask(null);
      setShowTaskModal(false);
    }
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  const toggleTaskCompletion = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const openEditModal = (task) => {
    setEditingTask(task);
    setShowTaskModal(true);
  };

  const openAddModal = () => {
    setEditingTask(null);
    setNewTask({ title: '', description: '', dueDate: '', priority: 'medium', notes: '' });
    setShowTaskModal(true);
  };

  const markNotificationAsRead = (id) => {
    setNotifications(notifications.map(notif => 
      notif.id === id ? { ...notif, read: true } : notif
    ));
  };

  const formatTime = (minutes, seconds) => {
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'text-red-400';
      case 'medium': return 'text-yellow-400';
      case 'low': return 'text-green-400';
      default: return 'text-gray-400';
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-black flex items-center justify-center p-4">
        <div className="bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 w-full max-w-md border border-purple-500/20">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-2">
              TaskFlow
            </h1>
            <p className="text-gray-300">Sign in to your account</p>
          </div>
          
          <form className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">Email</label>
              <input
                type="email"
                className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                placeholder="Enter your email"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">Password</label>
              <input
                type="password"
                className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                placeholder="Enter your password"
              />
            </div>
            
            <button
              type="button"
              onClick={() => setIsAuthenticated(true)}
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition-all duration-200"
            >
              Sign In
            </button>
          </form>
          
          <div className="mt-6 text-center">
            <button className="text-purple-400 hover:text-purple-300 text-sm">
              Forgot your password?
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-black text-white">
      {/* Header */}
      <header className="border-b border-purple-500/20 bg-gray-900/50 backdrop-blur-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                TaskFlow
              </h1>
            </div>
            
            <div className="flex items-center space-x-4">
              <button className="relative p-2 text-gray-300 hover:text-white transition-colors">
                <Bell className="w-5 h-5" />
                {notifications.filter(n => !n.read).length > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {notifications.filter(n => !n.read).length}
                  </span>
                )}
              </button>
              
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                  <User className="w-4 h-4" />
                </div>
                <span className="text-sm">{user.name}</span>
              </div>
              
              <button 
                onClick={() => setIsAuthenticated(false)}
                className="p-2 text-gray-300 hover:text-white transition-colors"
              >
                <LogOut className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-gray-800/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/20">
              <nav className="space-y-2">
                {[
                  { id: 'dashboard', label: 'Dashboard', icon: Clock },
                  { id: 'tasks', label: 'Tasks', icon: Check },
                  { id: 'timer', label: 'Timer', icon: Clock },
                  { id: 'settings', label: 'Settings', icon: Settings }
                ].map(item => {
                  const Icon = item.icon;
                  return (
                    <button
                      key={item.id}
                      onClick={() => setActiveView(item.id)}
                      className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200 ${
                        activeView === item.id 
                          ? 'bg-purple-600/30 text-purple-300 border border-purple-500/30' 
                          : 'text-gray-300 hover:bg-gray-700/50'
                      }`}
                    >
                      <Icon className="w-5 h-5" />
                      <span>{item.label}</span>
                    </button>
                  );
                })}
              </nav>
              
              <div className="mt-8">
                <h3 className="text-sm font-semibold text-gray-400 mb-3">NOTIFICATIONS</h3>
                <div className="space-y-3">
                  {notifications.slice(0, 3).map(notification => (
                    <div 
                      key={notification.id}
                      className={`p-3 rounded-lg border ${
                        notification.read 
                          ? 'bg-gray-700/30 border-gray-600' 
                          : 'bg-purple-600/20 border-purple-500/30'
                      }`}
                    >
                      <p className="text-sm text-gray-200">{notification.message}</p>
                      <p className="text-xs text-gray-400 mt-1">{notification.time}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            {activeView === 'dashboard' && (
              <div className="space-y-8">
                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-gray-800/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/20">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-gray-400 text-sm">Total Tasks</p>
                        <p className="text-2xl font-bold text-white">{tasks.length}</p>
                      </div>
                      <div className="w-12 h-12 bg-purple-600/30 rounded-lg flex items-center justify-center">
                        <Check className="w-6 h-6 text-purple-400" />
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gray-800/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/20">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-gray-400 text-sm">Completed</p>
                        <p className="text-2xl font-bold text-white">{tasks.filter(t => t.completed).length}</p>
                      </div>
                      <div className="w-12 h-12 bg-green-600/30 rounded-lg flex items-center justify-center">
                        <Check className="w-6 h-6 text-green-400" />
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gray-800/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/20">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-gray-400 text-sm">Pending</p>
                        <p className="text-2xl font-bold text-white">{tasks.filter(t => !t.completed).length}</p>
                      </div>
                      <div className="w-12 h-12 bg-yellow-600/30 rounded-lg flex items-center justify-center">
                        <Clock className="w-6 h-6 text-yellow-400" />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Recent Tasks */}
                <div className="bg-gray-800/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/20">
                  <div className="flex justify-between items-center mb-6">
                    <h2 className="text-xl font-semibold">Recent Tasks</h2>
                    <button 
                      onClick={openAddModal}
                      className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all duration-200 flex items-center space-x-2"
                    >
                      <Plus className="w-4 h-4" />
                      <span>Add Task</span>
                    </button>
                  </div>
                  
                  <div className="space-y-4">
                    {tasks.slice(0, 5).map(task => (
                      <div key={task.id} className="flex items-center justify-between p-4 bg-gray-700/30 rounded-lg border border-gray-600/30">
                        <div className="flex items-center space-x-4">
                          <button
                            onClick={() => toggleTaskCompletion(task.id)}
                            className={`w-5 h-5 rounded border-2 flex items-center justify-center ${
                              task.completed 
                                ? 'bg-purple-600 border-purple-600' 
                                : 'border-gray-500'
                            }`}
                          >
                            {task.completed && <Check className="w-3 h-3 text-white" />}
                          </button>
                          <div>
                            <h3 className={`font-medium ${task.completed ? 'line-through text-gray-400' : 'text-white'}`}>
                              {task.title}
                            </h3>
                            <p className="text-sm text-gray-400">{task.description}</p>
                            <div className="flex items-center space-x-3 mt-1">
                              <span className={`text-xs ${getPriorityColor(task.priority)}`}>
                                {task.priority}
                              </span>
                              <span className="text-xs text-gray-500">{task.dueDate}</span>
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => openEditModal(task)}
                            className="p-2 text-gray-400 hover:text-white transition-colors"
                          >
                            <Edit3 className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => deleteTask(task.id)}
                            className="p-2 text-gray-400 hover:text-red-400 transition-colors"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeView === 'tasks' && (
              <div className="bg-gray-800/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/20">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-xl font-semibold">All Tasks</h2>
                  <button 
                    onClick={openAddModal}
                    className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all duration-200 flex items-center space-x-2"
                  >
                    <Plus className="w-4 h-4" />
                    <span>Add Task</span>
                  </button>
                </div>
                
                <div className="space-y-4">
                  {tasks.map(task => (
                    <div key={task.id} className="p-4 bg-gray-700/30 rounded-lg border border-gray-600/30">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-4">
                          <button
                            onClick={() => toggleTaskCompletion(task.id)}
                            className={`w-5 h-5 rounded border-2 flex items-center justify-center mt-1 ${
                              task.completed 
                                ? 'bg-purple-600 border-purple-600' 
                                : 'border-gray-500'
                            }`}
                          >
                            {task.completed && <Check className="w-3 h-3 text-white" />}
                          </button>
                          <div className="flex-1">
                            <h3 className={`font-medium ${task.completed ? 'line-through text-gray-400' : 'text-white'}`}>
                              {task.title}
                            </h3>
                            <p className="text-gray-300 mt-1">{task.description}</p>
                            {task.notes && (
                              <div className="mt-2 p-3 bg-gray-600/30 rounded-lg">
                                <p className="text-sm text-gray-300">{task.notes}</p>
                              </div>
                            )}
                            <div className="flex items-center space-x-4 mt-3">
                              <span className={`text-xs px-2 py-1 rounded ${getPriorityColor(task.priority)} bg-gray-600/30`}>
                                {task.priority}
                              </span>
                              <span className="text-xs text-gray-500">Due: {task.dueDate}</span>
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => openEditModal(task)}
                            className="p-2 text-gray-400 hover:text-white transition-colors"
                          >
                            <Edit3 className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => deleteTask(task.id)}
                            className="p-2 text-gray-400 hover:text-red-400 transition-colors"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeView === 'timer' && (
              <div className="bg-gray-800/30 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/20">
                <div className="text-center">
                  <h2 className="text-2xl font-semibold mb-8">Pomodoro Timer</h2>
                  
                  <div className="mb-8">
                    <div className="flex justify-center space-x-4 mb-6">
                      {[
                        { mode: 'work', label: 'Work', time: 25 },
                        { mode: 'break', label: 'Short Break', time: 5 },
                        { mode: 'longBreak', label: 'Long Break', time: 15 }
                      ].map(item => (
                        <button
                          key={item.mode}
                          onClick={() => switchTimerMode(item.mode)}
                          className={`px-4 py-2 rounded-lg transition-all duration-200 ${
                            timer.mode === item.mode
                              ? 'bg-purple-600 text-white'
                              : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                          }`}
                        >
                          {item.label}
                        </button>
                      ))}
                    </div>
                    
                    <div className="text-8xl font-mono font-bold mb-8 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                      {formatTime(timer.minutes, timer.seconds)}
                    </div>
                    
                    <div className="flex justify-center space-x-4">
                      {!timer.isActive ? (
                        <button
                          onClick={startTimer}
                          className="bg-gradient-to-r from-green-600 to-emerald-600 text-white px-8 py-3 rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 font-semibold"
                        >
                          Start
                        </button>
                      ) : (
                        <button
                          onClick={pauseTimer}
                          className="bg-gradient-to-r from-yellow-600 to-orange-600 text-white px-8 py-3 rounded-lg hover:from-yellow-700 hover:to-orange-700 transition-all duration-200 font-semibold"
                        >
                          Pause
                        </button>
                      )}
                      <button
                        onClick={resetTimer}
                        className="bg-gradient-to-r from-gray-600 to-gray-700 text-white px-8 py-3 rounded-lg hover:from-gray-700 hover:to-gray-800 transition-all duration-200 font-semibold"
                      >
                        Reset
                      </button>
                    </div>
                  </div>
                  
                  <div className="bg-gray-700/30 rounded-lg p-6 border border-gray-600/30">
                    <h3 className="text-lg font-semibold mb-4">Current Task</h3>
                    <div className="text-left">
                      <p className="text-gray-300">No task selected</p>
                      <button className="mt-3 text-purple-400 hover:text-purple-300 text-sm">
                        Select a task to track
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeView === 'settings' && (
              <div className="bg-gray-800/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/20">
                <h2 className="text-xl font-semibold mb-6">Settings</h2>
                
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Profile Settings</h3>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">Name</label>
                        <input
                          type="text"
                          value={user.name}
                          onChange={(e) => setUser({...user, name: e.target.value})}
                          className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">Email</label>
                        <input
                          type="email"
                          value={user.email}
                          onChange={(e) => setUser({...user, email: e.target.value})}
                          className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium mb-4">Notification Preferences</h3>
                    <div className="space-y-3">
                      {[
                        { id: 'email', label: 'Email Notifications' },
                        { id: 'push', label: 'Push Notifications' },
                        { id: 'sms', label: 'SMS Alerts' }
                      ].map(item => (
                        <div key={item.id} className="flex items-center justify-between">
                          <span className="text-gray-300">{item.label}</span>
                          <button className="w-12 h-6 bg-purple-600 rounded-full relative">
                            <div className="w-5 h-5 bg-white rounded-full absolute top-0.5 right-0.5 transition-transform"></div>
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium mb-4">Theme</h3>
                    <div className="grid grid-cols-3 gap-4">
                      {[
                        { name: 'Dark Purple', gradient: 'from-gray-900 via-purple-900 to-black' },
                        { name: 'Midnight Blue', gradient: 'from-gray-900 via-blue-900 to-black' },
                        { name: 'Deep Violet', gradient: 'from-gray-900 via-violet-900 to-black' }
                      ].map(theme => (
                        <div key={theme.name} className="border border-gray-600 rounded-lg p-4 cursor-pointer hover:border-purple-500 transition-colors">
                          <div className={`h-20 rounded mb-2 bg-gradient-to-br ${theme.gradient}`}></div>
                          <p className="text-sm text-center text-gray-300">{theme.name}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Task Modal */}
      {showTaskModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-gray-800 rounded-2xl p-6 w-full max-w-md border border-purple-500/20">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold">
                {editingTask ? 'Edit Task' : 'Add New Task'}
              </h3>
              <button
                onClick={() => setShowTaskModal(false)}
                className="p-2 text-gray-400 hover:text-white transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <form className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">Title</label>
                <input
                  type="text"
                  value={editingTask ? editingTask.title : newTask.title}
                  onChange={(e) => editingTask 
                    ? setEditingTask({...editingTask, title: e.target.value})
                    : setNewTask({...newTask, title: e.target.value})
                  }
                  className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                  placeholder="Task title"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">Description</label>
                <textarea
                  value={editingTask ? editingTask.description : newTask.description}
                  onChange={(e) => editingTask 
                    ? setEditingTask({...editingTask, description: e.target.value})
                    : setNewTask({...newTask, description: e.target.value})
                  }
                  className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                  rows="3"
                  placeholder="Task description"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Due Date</label>
                  <input
                    type="date"
                    value={editingTask ? editingTask.dueDate : newTask.dueDate}
                    onChange={(e) => editingTask 
                      ? setEditingTask({...editingTask, dueDate: e.target.value})
                      : setNewTask({...newTask, dueDate: e.target.value})
                    }
                    className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">Priority</label>
                  <select
                    value={editingTask ? editingTask.priority : newTask.priority}
                    onChange={(e) => editingTask 
                      ? setEditingTask({...editingTask, priority: e.target.value})
                      : setNewTask({...newTask, priority: e.target.value})
                    }
                    className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">Notes</label>
                <textarea
                  value={editingTask ? editingTask.notes : newTask.notes}
                  onChange={(e) => editingTask 
                    ? setEditingTask({...editingTask, notes: e.target.value})
                    : setNewTask({...newTask, notes: e.target.value})
                  }
                  className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white"
                  rows="2"
                  placeholder="Additional notes"
                />
              </div>
              
              <div className="flex space-x-3 pt-4">
                <button
                  type="button"
                  onClick={() => setShowTaskModal(false)}
                  className="flex-1 px-4 py-3 bg-gray-700 text-gray-300 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="button"
                  onClick={editingTask ? updateTask : addTask}
                  className="flex-1 px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all duration-200"
                >
                  {editingTask ? 'Update' : 'Add'} Task
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default App;